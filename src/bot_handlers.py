"""
Bot handlers for Telegram Location Bot.
"""

import logging
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes
from src.location_service import LocationService

logger = logging.getLogger(__name__)


class BotHandlers:
    """Handles Telegram bot interactions."""
    
    def __init__(self) -> None:
        """Initialize bot handlers."""
        self.location_service = LocationService()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /start command."""
        user = update.effective_user
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.\n\n"
            "üìç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        
        await update.message.reply_text(welcome_message)
        logger.info(f"User {user.id} ({user.username}) started the bot")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /help command."""
        help_message = (
            "ü§ñ *–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç \"–§–∞–∫—Ç—ã –æ –º–µ—Å—Ç–µ\"*\n\n"
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π\"\n"
            "üîç –Ø –Ω–∞–π–¥—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n"
            "üìñ –†–∞—Å—Å–∫–∞–∂—É –≤–∞–º –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π. "
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} requested help")
    
    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle location messages - main bot functionality."""
        user = update.effective_user
        location = update.message.location
        
        logger.info(
            f"Received location from user {user.id} ({user.username}): "
            f"lat={location.latitude}, lon={location.longitude}"
        )
        
        # Send initial response
        processing_message = await update.message.reply_text(
            "üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ —Ä—è–¥–æ–º —Å –≤–∞–º–∏...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        try:
            # Process location and get interesting fact
            result = await self.location_service.process_location(
                latitude=location.latitude,
                longitude=location.longitude,
                user_id=user.id
            )
            
            if result:
                # Format and send response
                response_message = self._format_location_response(result)
                await processing_message.edit_text(response_message, parse_mode='Markdown')
                
                logger.info(f"Successfully processed location for user {user.id}")
            else:
                # No interesting place found
                await processing_message.edit_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "
                    "—Ä—è–¥–æ–º —Å –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞!"
                )
                logger.warning(f"No interesting places found for user {user.id}")
                
        except Exception as e:
            logger.error(f"Error processing location for user {user.id}: {e}")
            await processing_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
    
    async def unsupported_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle unsupported message types."""
        await update.message.reply_text(
            "ü§ñ –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!\n\n"
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "
            "\"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π\" –≤ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        
        logger.info(f"User {update.effective_user.id} sent unsupported message type")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle errors."""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # Send error message to user if possible
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    def _format_location_response(self, result: dict) -> str:
        """Format the location processing result for user."""
        place_name = result.get('place_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
        distance = result.get('distance', 0)
        fact = result.get('interesting_fact', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        
        # Distance formatting
        if distance < 1:
            distance_str = f"{int(distance * 1000)} –º"
        else:
            distance_str = f"{distance:.1f} –∫–º"
        
        response = (
            f"üèõÔ∏è *{place_name}*\n"
            f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~{distance_str}\n\n"
            f"üí° *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:*\n"
            f"{fact}"
        )
        
        return response 